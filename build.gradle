/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.4.1'
    id 'org.dddjava.jig-gradle-plugin' version '2020.11.2.1'
    id 'com.cosminpolifronie.gradle.plantuml' version '1.6.0'
    id "com.arenagod.gradle.MybatisGenerator" version "1.3"
    id 'de.undercouch.download' version '4.0.1'
    id "org.flywaydb.flyway" version "7.5.0"
    id "com.moowork.node" version "1.3.1"
    id 'jacoco'
}

sourceCompatibility = '11'

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.4.1'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.4.1'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.4.1'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.4.1'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE'
    implementation 'org.projectlombok:lombok:1.18.16'
    implementation 'org.springframework.security:spring-security-test:5.4.2'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.4.1'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.4.1'
    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly 'org.postgresql:postgresql:42.2.18'
    implementation 'mysql:mysql-connector-java:5.1.47'
    testImplementation("org.springframework.boot:spring-boot-starter-test:2.4.1") {
        exclude(group: 'org.junit.vintage')
    }
    testImplementation 'com.github.irof:jig-erd:latest.release'
    compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3"
    compile "org.flywaydb:flyway-core:7.5.0"
    implementation ("io.springfox:springfox-swagger2:2.9.2")
    runtimeOnly ("io.springfox:springfox-swagger-ui:2.9.2")
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'
    implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.2'
}

group = 'mrs'
version = '0.1.0-SNAPSHOT'
description = 'mrs'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

jig {
    linkPrefix = "https://github.com/system-sekkei/library/tree/master/src/main/java"
}

[compileJava, processResources]*.shouldRunAfter(clean)
jigReports.dependsOn(clean, classes)

plantUml {
    render input: "docs/diagrams/*.puml", output: "docs/img/diagrams", format: 'png', withMetadata: false
}

task cleanImage(type: Delete) {
    delete "./docs/img"
}

task syncJigImage(type: Sync) {
    from "./build/jig"
    into "./docs/img/jig"
    include "**/*.svg"
}

task syncErdImage(type: Sync) {
    from "./build/erd"
    into "./docs/img/erd"
    include "**/*.png"
}

task syncImage(type: GradleBuild, dependsOn: ['syncJigImage', 'syncErdImage'])

task publishDocs (type: GradleBuild, dependsOn: ['clean', 'build', 'cleanImage', 'jigReports', 'syncJigImage', 'syncErdImage', 'plantUml'])

configurations {
    mybatisGenerator
}

mybatisGenerator {
    verbose = true
    configFile = 'src/main/resources/autogen/generatorConfig.xml'

    // optional, here is the override dependencies for the plugin or you can add other database dependencies.
    dependencies {
        mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.7'
        mybatisGenerator 'mysql:mysql-connector-java:8.0.21'
        mybatisGenerator 'org.postgresql:postgresql:42.2.6'
        mybatisGenerator  'com.h2database:h2:1.4.200'
    }
}

// SchemaSpy Task
configurations {
    // JDBC ドライバのためのコンフィギュレーション
    jdbc
}

dependencies {
    // JDBC ドライバのライブラリ
    jdbc(
            'org.postgresql:postgresql:42.2.6'
    )
}

tasks.register( 'schemaSpy', JavaExec ) {
    description = 'Generates database documents.'

    group = name

    ext.outputDir = file( "${buildDir}/${name}" )

    download {
        ext.schemaSpyFile = file( "${downloadTaskDir}/${name}/schemaspy.jar" )

        src( 'https://github.com/schemaspy/schemaspy/releases/download/v6.1.0/schemaspy-6.1.0.jar' )
        dest( schemaSpyFile )
        overwrite = false
    }

    File driverFile = configurations.jdbc.files.first()

    main = '-jar'
    args = [
            schemaSpyFile,
            '-t', 'pgsql',
            '-dp', driverFile,
            '-host', 'localhost',
            '-port', '5432',
            '-u', 'root',
            '-p', 'root',
            '-db', 'appdb',
            '-s', 'public',
            '-o', outputDir
    ]

    doFirst {
        outputDir.deleteDir()
    }
}

// JaCoCo
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

// Node
task setNpmConfig(type: NpmTask) {
    if (project.hasProperty('api')) {
        if (project.hasProperty('env')) {
            if ("$env" == 'production') {
                args = ['config', 'set', 'Mrs:production_api_url', "$api"]
            } else if ("$env" == 'staging') {
                args = ['config', 'set', 'Mrs:staging_api_url', "$api"]
            } else {
                args = ['config', 'set', 'Mrs:development_api_url', "http://127.0.0.1:8080/api"]
            }
        }
    } else {
        args = ['config', 'set', 'Mrs:development_api_url', "http://127.0.0.1:8080/api"]
    }
}

task buildReact(type: NpmTask) {
    args = ['run', 'build:clean']
    if (project.hasProperty('env')) {
        if ("$env" == 'production') {
            args = ['run', 'build:prd']
        } else if ("$env" == 'staging') {
            args = ['run', 'build:stg']
        }
    } else {
        args = ['run', 'build:dev']
    }
}

buildReact.dependsOn npm_install
buildReact.dependsOn setNpmConfig
compileJava.dependsOn buildReact
