/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.4.1'
    id 'org.dddjava.jig-gradle-plugin' version '2020.11.2.1'
    id 'com.cosminpolifronie.gradle.plantuml' version '1.6.0'
    id "com.arenagod.gradle.MybatisGenerator" version "1.3"
}

sourceCompatibility = '11'

repositories {
    jcenter()
    mavenLocal()
    maven {
        url "https://dl.bintray.com/jignite/maven/"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.4.1'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.4.1'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.4.1'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.4.1'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE'
    implementation 'org.projectlombok:lombok:1.18.16'
    implementation 'org.springframework.security:spring-security-test:5.4.2'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.4.1'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.4.1'
    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly 'org.postgresql:postgresql:42.2.18'
    testImplementation("org.springframework.boot:spring-boot-starter-test:2.4.1") {
        exclude(group: 'org.junit.vintage')
    }
    testImplementation 'irof:jig-erd:latest.release'
    compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3"
}

group = 'mrs'
version = '0.1.0-SNAPSHOT'
description = 'mrs'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

jig {
    linkPrefix = "https://github.com/system-sekkei/library/tree/master/src/main/java"
}

[compileJava, processResources]*.shouldRunAfter(clean)
jigReports.dependsOn(clean, classes)

plantUml {
    render input: "docs/diagrams/*.puml", output: "docs/img/diagrams", format: 'png', withMetadata: false
}

task cleanImage(type: Delete) {
    delete "./docs/img"
}

task syncJigImage(type: Sync) {
    from "./build/jig"
    into "./docs/img/jig"
    include "**/*.svg"
}

task syncErdImage(type: Sync) {
    from "./build/erd"
    into "./docs/img/erd"
    include "**/*.png"
}

task syncImage(type: GradleBuild, dependsOn: ['syncJigImage', 'syncErdImage'])

task publishDocs (type: GradleBuild, dependsOn: ['clean', 'build', 'cleanImage', 'jigReports', 'syncJigImage', 'syncErdImage', 'plantUml'])

configurations {
    mybatisGenerator
}

mybatisGenerator {
    verbose = true
    configFile = 'src/main/resources/autogen/generatorConfig.xml'

    // optional, here is the override dependencies for the plugin or you can add other database dependencies.
    dependencies {
        mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.7'
        mybatisGenerator 'mysql:mysql-connector-java:5.1.47'
        mybatisGenerator 'org.postgresql:postgresql:42.2.6'
        mybatisGenerator  'com.h2database:h2:1.4.200'
    }
}

