- name: check java
  stat:
    path: /usr/bin/java
  register: chk_java

- name: Install package.
  yum:
    name: "{{ java_ver_amazon }}"
    state: present
  when: ansible_distribution == 'Amazon' and chk_java.stat.exists == false

# Install SDKMAN if not uninstalled
- name: Check for SDKMAN installation
  stat:
    path: '{{ sdkman_dir }}/bin/sdkman-init.sh'
  register: sdkman_init

- block:
    - name: Download SDKMAN
      get_url:
        url: https://get.sdkman.io
        dest: '{{ sdkman_tmp_dir }}/sdkman_script'
        owner: '{{ sdkman_user }}'
        group: '{{ sdkman_group }}'
        validate_certs: '{{ sdkman_validate_ssl }}'

    - name: Run SDKMAN script
      environment:
        SDKMAN_DIR: '{{ sdkman_dir }}'
      command: /bin/bash {{ sdkman_tmp_dir }}/sdkman_script
      args:
        creates: '{{ sdkman_dir }}/bin/sdkman-init.sh'
      notify: Cleanup SDKMAN script

  when: not sdkman_init.stat.exists
  become: '{{ sdkman_user != ansible_user_id }}'
  become_user: '{{ sdkman_user }}'

- name: Install SDK candidates/versions
  shell: >-
    . {{ sdkman_dir }}/bin/sdkman-init.sh &&
    sdk install {{ item.candidate }} {{ item.version | default('') }} {{ item.localpath | default('') }}
  args:
    executable: /bin/bash
  loop: '{{ sdkman_install_packages }}'
  register: sdk_install
  changed_when: >-
    'is already installed.' not in sdk_install.stdout
  failed_when: >-
    sdk_install.rc != 0 and
    'is already installed.' not in sdk_install.stdout

- name: Get SDK defaults
  shell: . {{ sdkman_dir }}/bin/sdkman-init.sh && sdk current {{ item }}
  args:
    executable: /bin/bash
  register: get_sdk_defaults
  changed_when: false
  loop: >-
    {{ sdkman_install_packages | map(attribute="candidate") | unique | list }}

- name: Set SDK defaults
  shell: >-
    . {{ sdkman_dir }}/bin/sdkman-init.sh &&
    sdk default {{ item.key }} {{ item.value }}
  args:
    executable: /bin/bash
  loop: '{{ sdkman_defaults | dict2items }}'
  changed_when: >-
    not item.value in
    (get_sdk_defaults.results |
     selectattr('item', 'equalto', item.key) |
     first).stdout
